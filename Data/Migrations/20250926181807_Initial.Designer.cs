// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace tmodworks.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250926181807_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Cheat", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cheats");

                    b.HasData(
                        new
                        {
                            Id = "4fd1cd7e-c97b-42ba-b604-6b7aa557e527",
                            CategoryId = "a48f0eb2-f930-48fa-8f6d-fd6f265fca71",
                            CreatedAt = new DateTime(2025, 9, 26, 18, 18, 6, 838, DateTimeKind.Utc).AddTicks(8571),
                            IsActive = true,
                            Name = "Health",
                            UpdatedAt = new DateTime(2025, 9, 26, 18, 18, 6, 838, DateTimeKind.Utc).AddTicks(8572)
                        });
                });

            modelBuilder.Entity("Models.CheatCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CheatCategories");

                    b.HasData(
                        new
                        {
                            Id = "a48f0eb2-f930-48fa-8f6d-fd6f265fca71",
                            Name = "PLAYER",
                            Priority = 0
                        },
                        new
                        {
                            Id = "74bab71c-6522-4b58-9e02-f3c72108a2cb",
                            Name = "INVENTORY",
                            Priority = 1
                        },
                        new
                        {
                            Id = "c9540210-a1ef-425f-a048-1e0170d1d175",
                            Name = "STATS",
                            Priority = 2
                        },
                        new
                        {
                            Id = "ef0e46f8-2003-4f90-93b7-30c614160dd1",
                            Name = "ENEMIES",
                            Priority = 3
                        },
                        new
                        {
                            Id = "86c8bd7f-d407-460a-a6e4-29903fbbc5be",
                            Name = "WEAPONS",
                            Priority = 4
                        },
                        new
                        {
                            Id = "bbcc9473-2b20-4675-a951-6bfb04ef17c6",
                            Name = "GAME",
                            Priority = 5
                        },
                        new
                        {
                            Id = "62cc82e6-6688-48a6-8fe5-a0149e8208e8",
                            Name = "PHYSICS",
                            Priority = 6
                        },
                        new
                        {
                            Id = "4699a053-420d-4ecd-aac5-eba93ed4167a",
                            Name = "TELEPORT",
                            Priority = 7
                        },
                        new
                        {
                            Id = "0f5afa3f-3d99-4969-91f6-c75d867269c9",
                            Name = "OTHER",
                            Priority = 8
                        });
                });

            modelBuilder.Entity("Models.Game", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SteamAppId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("SteamAppId")
                        .IsUnique();

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = "0ecd7690-b369-461e-8a99-4ba1f3a0c457",
                            CreatedAt = new DateTime(2025, 9, 26, 18, 18, 6, 838, DateTimeKind.Utc).AddTicks(8543),
                            IsActive = true,
                            ModuleName = "Battlefront2.dll",
                            Name = "STAR WARS™: Battlefront Classic Collection",
                            ProcessName = "Battlefront2.exe",
                            SteamAppId = 2446550,
                            UpdatedAt = new DateTime(2025, 9, 26, 18, 18, 6, 838, DateTimeKind.Utc).AddTicks(8543)
                        });
                });

            modelBuilder.Entity("Models.GameCheat", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BaseAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CheatId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ControlType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("TOGGLE");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("Max")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("Min")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int[]>("Offsets")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<decimal?>("Step")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CheatId");

                    b.HasIndex("GameId", "CheatId")
                        .IsUnique();

                    b.ToTable("GameCheats");

                    b.HasData(
                        new
                        {
                            Id = "a6f97787-2192-4df4-86f7-e7525574bbd0",
                            BaseAddress = "023DF1B0",
                            CheatId = "4fd1cd7e-c97b-42ba-b604-6b7aa557e527",
                            ControlType = "TOGGLE",
                            CreatedAt = new DateTime(2025, 9, 26, 18, 18, 6, 838, DateTimeKind.Utc).AddTicks(8603),
                            DisplayName = "Infinite Health",
                            GameId = "0ecd7690-b369-461e-8a99-4ba1f3a0c457",
                            IsActive = true,
                            Offsets = new[] { 38 },
                            UpdatedAt = new DateTime(2025, 9, 26, 18, 18, 6, 838, DateTimeKind.Utc).AddTicks(8604)
                        });
                });

            modelBuilder.Entity("Models.Cheat", b =>
                {
                    b.HasOne("Models.CheatCategory", "Category")
                        .WithMany("Cheats")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Models.GameCheat", b =>
                {
                    b.HasOne("Models.Cheat", "Cheat")
                        .WithMany("GameCheats")
                        .HasForeignKey("CheatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Game", "Game")
                        .WithMany("GameCheats")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cheat");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Models.Cheat", b =>
                {
                    b.Navigation("GameCheats");
                });

            modelBuilder.Entity("Models.CheatCategory", b =>
                {
                    b.Navigation("Cheats");
                });

            modelBuilder.Entity("Models.Game", b =>
                {
                    b.Navigation("GameCheats");
                });
#pragma warning restore 612, 618
        }
    }
}
