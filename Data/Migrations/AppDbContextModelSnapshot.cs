// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace tmodworks.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Cheat", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cheats");

                    b.HasData(
                        new
                        {
                            Id = "1e15a719-b17c-4cb7-b31e-7b9eb79df3fa",
                            CategoryId = "2d0e264d-4192-4d5a-9ed9-dc64a1ecc04b",
                            CreatedAt = new DateTime(2025, 9, 25, 21, 47, 23, 441, DateTimeKind.Utc).AddTicks(1577),
                            IsActive = true,
                            Name = "Health",
                            UpdatedAt = new DateTime(2025, 9, 25, 21, 47, 23, 441, DateTimeKind.Utc).AddTicks(1578)
                        });
                });

            modelBuilder.Entity("Models.CheatCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CheatCategories");

                    b.HasData(
                        new
                        {
                            Id = "2d0e264d-4192-4d5a-9ed9-dc64a1ecc04b",
                            Name = "PLAYER",
                            Priority = 0
                        },
                        new
                        {
                            Id = "e964d84c-b235-414f-bc95-4524e761ffed",
                            Name = "INVENTORY",
                            Priority = 1
                        },
                        new
                        {
                            Id = "ad8a1cb0-b355-4bb4-a4f4-c40b2d993943",
                            Name = "STATS",
                            Priority = 2
                        },
                        new
                        {
                            Id = "49983f5c-3382-4ead-af25-6aba0e544ac2",
                            Name = "ENEMIES",
                            Priority = 3
                        },
                        new
                        {
                            Id = "b9c740f2-b8f2-48b0-aa47-9ab4728a7b25",
                            Name = "WEAPONS",
                            Priority = 4
                        },
                        new
                        {
                            Id = "6bc4e6ee-4ac3-4d83-810f-7176dd05ca49",
                            Name = "GAME",
                            Priority = 5
                        },
                        new
                        {
                            Id = "e3872ec1-deb7-47b7-9ec1-28a6fa00db01",
                            Name = "PHYSICS",
                            Priority = 6
                        },
                        new
                        {
                            Id = "a6931b4a-b337-40ed-affa-076cc42d8fa1",
                            Name = "TELEPORT",
                            Priority = 7
                        },
                        new
                        {
                            Id = "e4ad9b77-3e53-41ae-8a0f-47ea680fde27",
                            Name = "OTHER",
                            Priority = 8
                        });
                });

            modelBuilder.Entity("Models.Game", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SteamAppId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("SteamAppId")
                        .IsUnique();

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = "4495544a-1d1a-44a6-87c0-f3232028e9cd",
                            CreatedAt = new DateTime(2025, 9, 25, 21, 47, 23, 441, DateTimeKind.Utc).AddTicks(1548),
                            IsActive = true,
                            ModuleName = "Battlefront2.dll",
                            Name = "STAR WARS™: Battlefront Classic Collection",
                            ProcessName = "Battlefront2.exe",
                            SteamAppId = 2446550,
                            UpdatedAt = new DateTime(2025, 9, 25, 21, 47, 23, 441, DateTimeKind.Utc).AddTicks(1549)
                        });
                });

            modelBuilder.Entity("Models.GameCheat", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BaseAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CheatId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int[]>("Offsets")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CheatId");

                    b.HasIndex("GameId", "CheatId")
                        .IsUnique();

                    b.ToTable("GameCheats");

                    b.HasData(
                        new
                        {
                            Id = "5f0958e2-c7d3-43f5-aa36-1f3185185637",
                            BaseAddress = "023DF1B0",
                            CheatId = "1e15a719-b17c-4cb7-b31e-7b9eb79df3fa",
                            CreatedAt = new DateTime(2025, 9, 25, 21, 47, 23, 441, DateTimeKind.Utc).AddTicks(1612),
                            DisplayName = "Infinite Health",
                            GameId = "4495544a-1d1a-44a6-87c0-f3232028e9cd",
                            IsActive = true,
                            Offsets = new[] { 38 },
                            UpdatedAt = new DateTime(2025, 9, 25, 21, 47, 23, 441, DateTimeKind.Utc).AddTicks(1613)
                        });
                });

            modelBuilder.Entity("Models.Cheat", b =>
                {
                    b.HasOne("Models.CheatCategory", "Category")
                        .WithMany("Cheats")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Models.GameCheat", b =>
                {
                    b.HasOne("Models.Cheat", "Cheat")
                        .WithMany("GameCheats")
                        .HasForeignKey("CheatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Game", "Game")
                        .WithMany("GameCheats")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cheat");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Models.Cheat", b =>
                {
                    b.Navigation("GameCheats");
                });

            modelBuilder.Entity("Models.CheatCategory", b =>
                {
                    b.Navigation("Cheats");
                });

            modelBuilder.Entity("Models.Game", b =>
                {
                    b.Navigation("GameCheats");
                });
#pragma warning restore 612, 618
        }
    }
}
